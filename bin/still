#!/usr/bin/env node

var still = require('../index'),
  utils = require('../lib/utils'),
  optimist = require('optimist'),
  findit = require('findit'),
  fs = require('fs'),
  files = {},
  argv,
  finder,
  path,
  swig;

argv = optimist
  .usage('Usage: still [path] -o [output path] [options]')
  .demand(['o'])
  .describe('o', 'Output directory.')
  .alias('o', 'out')
  .describe('i', 'Copy path to output directory.')
  .alias('i', 'include')
  .describe('e', 'Template Engine to use for rendering')
  .alias('e', 'engine')
  .default('e', 'swig')
  .describe('encoding', 'File encoding (input and output)')
  .default('encoding', 'utf-8')
  .describe('v', 'Be verbose')
  .alias('v', 'verbose')
  .argv;

if (!argv._.length) {
  optimist.showHelp();
  return;
}

path = argv._[0];

still.setEngine(argv.e, path);
still.setOutput(path, argv.o);
still.setEncoding(argv.encoding);

utils.setLevel(argv.v);

finder = findit.find(path);

finder.on('file', function (file, stat) {
  var isHTML = (/\.html$/).test(file),
    path;

  if (!isHTML) {
    return;
  }

  path = file.replace(/\.html$/, '');

  if (!files.hasOwnProperty(path)) {
    files[path] = {};
  }

  if (isHTML) {
    files[path].file = file;
    files[path].stat = {
      atime: new Date(stat.atime),
      ctime: new Date(stat.ctime),
      mtime: new Date(stat.mtime)
    };
  }

  still.build(file, stat)
});
